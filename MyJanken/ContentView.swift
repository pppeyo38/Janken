import SwiftUI

struct ContentView: View {
  @State var ansNum = -1 // „Ç≥„É≥„Éî„É•„Éº„Çø„Éº„ÅÆÊâã
  @State var selNum = -1 // Ëá™ÂàÜ„ÅÆÊâã
  @State var resultNum = -1 // ÁµêÊûú
  @State var resultText = "" // Êà¶Á∏æ„ÅÆÊñáÂ≠óÂàó
  @State var dialogText = ""
  @State var userLife = 3 // „É¶„Éº„Ç∂„É©„Ç§„Éï
  @State var jankenTimes = 0 // „Åò„ÇÉ„Çì„Åë„ÇìÁ∑èÂõûÊï∞
  @State var userHand = [0, 0, 0] // „É¶„Éº„Ç∂„Åå„Å©„ÅÆÊâã„Çí‰ΩïÂõûÂá∫„Åó„Åü„Åã
  @State var isViable = true // Ëá™ÂàÜ„ÅÆÂá∫„ÅôÊâã„Åß„Åò„ÇÉ„Çì„Åë„ÇìÂÆüË°åÂèØËÉΩ„Åã
  @State var isFinish = false // Ë©¶ÂêàÁµÇ‰∫Ü„ÅãÔºàPopupË°®Á§∫Ôºâ
  
  let imgName = ["gu", "choki", "pa"] // ÁîªÂÉèÂêç
  let imgStr = ["„Ç∞„Éº", "„ÉÅ„Éß„Ç≠", "„Éë„Éº"] // Ëá™ÂàÜ„ÅÆÊâã„ÅÆË°®Á§∫Áî®
  let resultStr = ["Âãù„Å°ÔºÅ", "Ë≤†„Åë‚Ä¶", "Âºï„ÅçÂàÜ„Åë"] // ÁµêÊûú„ÅÆË°®Á§∫Áî®
  let resultUnit = ["Âãù", "Êïó", "ÂàÜ"] // Êà¶Á∏æ„ÅÆË°®Á§∫Áî®
  let tabWL = [[2, 0, 1], [1, 2, 0], [0, 1, 2]] // ÂØæÊà¶Ë°®
  
  // Âà§ÂÆö„Åä„Çà„Å≥Êà¶Á∏æ„ÅÆÊõ¥Êñ∞
  func doJanken() {
    isViable = selfOutPutCount(selfHand: selNum)
    if (isViable) {
      ansNum = Int.random(in: 0...2)
      resultNum = tabWL[selNum][ansNum]
      dialogText = imgStr[selNum] + "„ÇíÂá∫„Åó„Åæ„Åó„Åü"
      jankenTimes += 1
    } else {
      dialogText = imgStr[selNum] + "„ÅØ„ÇÇ„ÅÜÂá∫„Åõ„Åæ„Åõ„Çì"
    }
    lifeCalc(result: resultNum)
    judge()
  }
  
  // Êâã„Ç´„Ç¶„É≥„Éà 0‚Üí„Ç∞„Éº 1‚Üí„ÉÅ„Éß„Ç≠ 2‚Üí„Éë„Éº
  func selfOutPutCount(selfHand: Int) -> Bool {
    if (userHand[selfHand] < 4) {
      userHand[selfHand] += 1
      return true
    } else {
      return false
    }
  }
  
  // „É©„Ç§„ÉïÂá¶ÁêÜ
  func lifeCalc(result: Int) {
    if (result == 0) {
      userLife += 1
    } else if (result == 1) {
      userLife -= 1
    }
  }
  
  // ÂãùÊïóÂà§ÂÆö
  func judge() {
    if (userLife == 0) {
      resultText = "„ÅÇ„Å™„Åü„ÅÆË≤†„Åëüò≠"
      isFinish = true
    } else if (jankenTimes == 12) {
      resultText = "„ÅÇ„Å™„Åü„ÅÆÂãù„Å°üéâ"
      isFinish = true
    }
  }
  
  var body: some View {
    VStack {
      // „É¶„Éº„Ç∂„É©„Ç§„ÉïË°®Á§∫
      HStack {
        Image(systemName: "suit.heart.fill")
          .foregroundColor(Color.pink)
          .frame(width: 16.0, height: 16.0)
        Text(String(userLife))
          .font(.title)
      }
      
      Spacer()
      
      // ÁîªÂÉè„Å®ÁµêÊûú
      if ansNum == -1 {
        // ÂàùÊúüÁä∂ÊÖã
        Text("„Åì„Çå„Åã„Çâ„Åò„ÇÉ„Çì„Åë„Çì„Çí„Åó„Åæ„Åô")
          .padding(.bottom)
      } else {
        // ÁîªÂÉè
        Image(imgName[ansNum])
          .resizable()
          .aspectRatio(contentMode: .fit)
          .rotationEffect(.init(degrees: 180))
        Spacer()
        Image(imgName[selNum])
          .resizable()
          .aspectRatio(contentMode: .fit)
        Spacer()
        // ÁîªÂÉè
        Text(dialogText)
          .padding(.bottom)
        Text(resultStr[resultNum])
          .font(.title)
      }
      
      // Ëá™ÂàÜ„ÅÆÂá∫„ÅôÊâã„ÇíÊ±∫„ÇÅ„Çã„Éú„Çø„É≥
      HStack {
        VStack {
          Button(imgStr[0]){
            selNum = 0
            doJanken()
          }
            .frame(maxWidth: .infinity)
            .frame(height: 80)
            .font(.title2)
            .background(Color.purple)
            .foregroundColor(Color.white)
          Text(String(userHand[0]) + " / 4")
        }
        VStack {
          Button(imgStr[1]){
            selNum = 1
            doJanken()
          }
            .frame(maxWidth: .infinity)
            .frame(height: 80)
            .font(.title2)
            .background(Color.purple)
            .foregroundColor(Color.white)
          Text(String(userHand[1]) + " / 4")
        }
        VStack {
          Button(imgStr[2]){
            selNum = 2
            doJanken()
          }
            .frame(maxWidth: .infinity)
            .frame(height: 80)
            .font(.title2)
            .background(Color.purple)
            .foregroundColor(Color.white)
          Text(String(userHand[2]) + " / 4")
        }
      }
    }
      .padding()
      .overlay{
        if (isFinish) {
          PopupView(resultText: $resultText, ansNum: $ansNum, jankenTimes: $jankenTimes, userLife: $userLife, userHand: $userHand, isFinish: $isFinish)
        }
      }
  }
}

struct PopupView: View {
  @Binding var resultText: String
  @Binding var ansNum: Int
  @Binding var jankenTimes: Int
  @Binding var userLife: Int
  @Binding var userHand: Array<Int>
  @Binding var isFinish: Bool
  
  var body: some View {
    VStack {
      VStack(spacing: 24) {
        Text(resultText)
          .font(.title)
          .padding(.top)
        Button("„ÇÇ„ÅÜ‰∏ÄÂ∫¶„Éó„É¨„Ç§„Åô„Çã") {
          ansNum = -1
          jankenTimes = 0
          userLife = 3
          for i in 0...2 {
            userHand[i] = 0
          }
          isFinish = false
        }
        .frame(maxWidth: .infinity)
        .frame(height: 55)
        .background(Color.blue)
        .foregroundColor(Color.white)
        .cornerRadius(12)
      }
        .frame(width: 320, height: 200, alignment: .center)
        .padding()
        .background(Color.white)
        .cornerRadius(12)
        .shadow(color: .gray.opacity(0.7), radius: 5)
    }
    .frame(maxWidth: .infinity, maxHeight: .infinity)
    .background(Color.gray.opacity(0.5))
  }
}

struct ContentView_Previews: PreviewProvider {
  static var previews: some View {
    ContentView()
  }
}
